// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  caseId String?

  @@id([provider, providerAccountId])
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  gender          String?
  emailVerified   DateTime?
  passwordHash    String
  image           String?
  accounts        Account[]
  profileComplete Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  member Member?
}

model Member {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String?
  created     DateTime @default(now())
  updated     DateTime @default(now())
  description String?
  instrument  String?
  department  String?
  image       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
  sourceLikes Like[]   @relation("source")
  targetLikes Like[]   @relation("target")
  Like        Like[]
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String?

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Like {
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)

  targetUserId String
  targetMember Member  @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)
  Member       Member? @relation(fields: [memberId], references: [id])
  memberId     String?

  @@id([sourceUserId, targetUserId])
}

model Token {
  id      String    @id @default(cuid())
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

model Case {
  id                       String                  @id @default(cuid())
  name                     String
  status                   ConflictStatusType
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  AreaType                 String
  LandType                 String
  LandLocation             String
  SacredPlaces             Boolean
  WaterSpring              Boolean
  MainCrops                Crop[] // Transformer en relation n to n
  ClanLinearity            String
  yearStart                Int // Transformer en Date
  DirectStakeholders       DirectStakeholderType[] // Transformer en relation n to n
  OtherStakeholders        OtherStakeholderType[]
  LegalStatusFarmersPOV    LegalStatusType
  OwnershipProofFarmersPOV OwnershipProofType
  ConflictHistory          String
  ConflictArea             Decimal
  ImpactedHouseholds       Int
  ImpactedMen              Int
  ImpactedWomen            Int
  ImpactedKids             Int
  ImpactedYouth            Int
  ImpactedDisabled         Int
  FuturePlans              FuturePlansType
  GovtRespectsLaw          Boolean
  PlannedCompensation      CompensationType
  KSISupportStart          Int // Transformer en date
  KSISupport               SupportType[]
}

enum SupportType {
  CASE_STORY_COLLECTION
  ADVOCACY
  LEGAL_SUPPORT
  ORGANIZING_FARMERS
  SENSIBILIZATION
}

enum CompensationType {
  PLANNED_NOT_PAID
  PLANNED_PARTIALLY_PAID
  PAID
  NO
  TO_BE_DEFINED
}

enum ConflictStatusType {
  SOLVED
  ONGOING_TRIBUNAL
  ONGOING_NO_TRIBUNAL
}

enum OtherStakeholderType {
  MUNICIPALITY
  SUKU
  ARMY
  POLICE
  NATIONAL_POLITICIANS
  VETERANS
  BROKERS
}

enum DirectStakeholderType {
  BTW_HOUSEHOLDS
  BTW_COMMUNITIES
  BTW_COMMUNITY_AND_STATE
  BTW_COMMUNITY_AND_PRIVATE_COMPANY
  BTW_COMMUNITY_AND_FORMER_KING
  BTW_COMMUNITY_AND_FORMER_LANDLORD
  BTW_COMMUNITY_AND_VETERANS
  BTW_COMMUNITY_AND_CHURCH
}

enum FuturePlansType {
  HOUSING
  ROADS
  SCHOOL
  HOSPITAL
  LEASE_TO_PRIVATE_COMPANY
  BUSINESS_CHANGE
  BUSINESS_CONTINUE
}

enum LegalStatusType {
  CUSTOMARY_LAND
  COMMUNITY_LAND
  COMMUNITY_PROTECTION_ZONE
  PRIVATE_LAND
  PUBLIC_DOMAIN
}

enum OwnershipProofType {
  RECOGNISED_INHERITANCE
  RIGHT_TO_USE_PORTUGUESE
  RIGHT_TO_USE_INDONESIAN
  LAND_TITLE_PORTUGUESE
  LAND_TITLE_INDONESIAN
  LAND_TITLE_TIMORESE
  STATE_LAND
  NONE
}

model Crop {
  id   String @id @default(cuid())
  name String

  Case   Case?   @relation(fields: [caseId], references: [id])
  caseId String?
}
